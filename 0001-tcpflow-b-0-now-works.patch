From 7c32381b6548e407fc3d0f3a63ccf1b6b12dadfd Mon Sep 17 00:00:00 2001
From: Dima Kogan <dima@secretsauce.net>
Date: Thu, 5 Mar 2015 15:01:07 -0800
Subject: [PATCH] 'tcpflow -b 0' now works
Forwarded: https://github.com/simsong/tcpflow/issues/95

This creates length-0 flow files that act as binary success/failure indicators
---
 src/tcpdemux.h |  4 ++--
 src/tcpip.cpp  | 22 +++++++++++++---------
 2 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/src/tcpdemux.h b/src/tcpdemux.h
index 858c50b..09c5970 100644
--- a/src/tcpdemux.h
+++ b/src/tcpdemux.h
@@ -91,7 +91,7 @@ public:
         options():console_output(false),console_output_nonewline(false),
                   store_output(true),opt_md5(false),
                   post_processing(false),gzip_decompress(true),
-                  max_bytes_per_flow(),
+                  max_bytes_per_flow(-1),
                   max_flows(0),suppress_header(0),
                   output_strip_nonprint(true),output_hex(false),use_color(0),
                   output_packet_index(false),max_seek(MAX_SEEK) {
@@ -102,7 +102,7 @@ public:
         bool    opt_md5;                // do we calculate MD5 on DFXML output?
         bool    post_processing;        // decode headers after tcp connection closes
         bool    gzip_decompress;
-        uint64_t max_bytes_per_flow;
+        int64_t  max_bytes_per_flow;
         uint32_t max_flows;
         bool    suppress_header;
         bool    output_strip_nonprint;
diff --git a/src/tcpip.cpp b/src/tcpip.cpp
index 70d9ef5..754230b 100644
--- a/src/tcpip.cpp
+++ b/src/tcpip.cpp
@@ -236,10 +236,12 @@ void tcpip::print_packet(const u_char *data, uint32_t length)
     /* green, blue, read */
     const char *color[3] = { "\033[0;32m", "\033[0;34m", "\033[0;31m" };
 
-    if(demux.opt.max_bytes_per_flow>0){
-	if(last_byte > demux.opt.max_bytes_per_flow) return; /* too much has been printed */
-	if(length > demux.opt.max_bytes_per_flow - last_byte){
-	    length = demux.opt.max_bytes_per_flow - last_byte; /* can only output this much */
+    if(demux.opt.max_bytes_per_flow>=0){
+        uint64_t max_bytes_per_flow = (uint64_t)demux.opt.max_bytes_per_flow;
+
+	if(last_byte > max_bytes_per_flow) return; /* too much has been printed */
+	if(length > max_bytes_per_flow - last_byte){
+	    length = max_bytes_per_flow - last_byte; /* can only output this much */
 	    if(length==0) return;
 	}
     }
@@ -419,13 +421,15 @@ void tcpip::store_packet(const u_char *data, uint32_t length, int32_t delta,stru
      * but remember to seek out to the actual position after the truncated write...
      */
     uint32_t wlength = length;		// length to write
-    if (demux.opt.max_bytes_per_flow){
-	if(offset >= demux.opt.max_bytes_per_flow){
+    if (demux.opt.max_bytes_per_flow >= 0){
+        uint64_t max_bytes_per_flow = (uint64_t)demux.opt.max_bytes_per_flow;
+
+	if(offset >= max_bytes_per_flow){
 	    wlength = 0;
 	} 
-	if(offset < demux.opt.max_bytes_per_flow &&  offset+length > demux.opt.max_bytes_per_flow){
+	if(offset < max_bytes_per_flow &&  offset+length > max_bytes_per_flow){
 	    DEBUG(2) ("packet truncated by max_bytes_per_flow on %s", flow_pathname.c_str());
-	    wlength = demux.opt.max_bytes_per_flow - offset;
+	    wlength = max_bytes_per_flow - offset;
 	}
     }
 
@@ -434,7 +438,7 @@ void tcpip::store_packet(const u_char *data, uint32_t length, int32_t delta,stru
      * save the return value because open_tcpfile() puts the file pointer
      * into the structure for us.
      */
-    if (fd < 0 && wlength>0) {
+    if (fd < 0) {
 	if (open_file()) {
 	    DEBUG(1)("unable to open TCP file %s  fd=%d  wlength=%d",
                      flow_pathname.c_str(),fd,(int)wlength);
-- 
2.1.4

